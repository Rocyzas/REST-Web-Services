package com.quotes.api;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import java.io.FileNotFoundException;
import java.io.FileReader;

import com.sun.jersey.spi.resource.Singleton;
import org.json.simple.JSONObject;
import org.json.simple.JSONArray; //Array external lib
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.io.IOException;
import java.util.*;


@Path("/quote")
@Singleton
public class QuoteREST {

//    global json array (for making the use of singleton )
    JSONArray a;

//        Reading the file and storing in a json array for better performance
    public QuoteREST(){
        try {
            JSONParser parser = new JSONParser();
            System.out.println("Reading Quotes....");
            a = (JSONArray) parser.parse(new FileReader("resources/quotes.json"));

            System.out.println("Quotes Read");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (ParseException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    //keyword given
    @GET
    @Path("/tag/{w}/{number}")
    @Produces(MediaType.TEXT_PLAIN)
    public String selectQuote(@PathParam("w") String word_input, @PathParam("number") int number_quotes)throws java.io.FileNotFoundException,
            java.io.IOException, org.json.simple.parser.ParseException{

        System.out.println("GET Quote Request: " + word_input + " " + number_quotes);


//        make quote not to repeat
        String strCheck = "";


        JSONObject writer = new JSONObject(); //For output file
        ArrayList<String> ar = new ArrayList<String>(); //For output string

        int counter=0;
        for (Object o : a)
        {
            JSONObject quote = (JSONObject) o;

            String qt = (String) quote.get("Quote");
            String au = (String) quote.get("Author");
            String cat = (String) quote.get("Category");
            JSONArray tags = (JSONArray) quote.get("Tags");
            double pop = ((Number)quote.get("Popularity")).doubleValue();

            writer.put("Quote", qt);
            writer.put("Author", au);
            writer.put("Category", cat);
            writer.put("Popularity", pop);
            writer.put("Tags", tags);

            for (Object tg : tags)
            {
                 if(word_input.equals(tg) && !strCheck.equals(qt)){
                     ar.add(writer.toString() + "\n");

//                     increasing counter because one more line is added into a file
                     counter+=1;
//                     changing the quote str to not repeatedly write it again in the file next time
                     strCheck = qt;
                     break;
                }
            }
        }

//        shuffling array to make output more dynamic
        Collections.shuffle(ar);
        ArrayList<String> outArray = new ArrayList<String>(); //For output string
        for (int i=0; i<Math.min(number_quotes, ar.size()); i++) {
            outArray.add(ar.get(i));
        }

        return outArray.toString();

    }

//    Nothing is given
    @GET
    @Path("/random")
    @Produces(MediaType.TEXT_PLAIN)
    public String selectRandomQuote()throws java.io.FileNotFoundException,
            java.io.IOException, org.json.simple.parser.ParseException{

        String Quote = "{}, {}, {}, {}, {}"; //In case there will be aan empty quote

//        Random quote
        Random rand = new Random();
        int rand_int = rand.nextInt(a.size()- (int)a.size()/1000);

        JSONObject writer = new JSONObject(); //For output file
        String arr = "";

        int counter = 0;
//        Loop goes until the number generated by random
        for (Object o : a)
        {
            JSONObject quote = (JSONObject) o;

            String qt = (String) quote.get("Quote");
            String au = (String) quote.get("Author");
            String cat = (String) quote.get("Category");
            JSONArray tags = (JSONArray) quote.get("Tags");
            double pop = ((Number)quote.get("Popularity")).doubleValue();

            writer.put("Quote", qt);
            writer.put("Author", au);
            writer.put("Category", cat);
            writer.put("Popularity", pop);

            for (Object tg : tags)
            {
                writer.put("Tags", tags);
                arr = writer.toString();
            }
            if(counter>=rand_int){
                if(arr != null) {
                    return arr;
                }
            }
            counter+=1;
        }

        return Quote;
    }


    //Author with name and number of quotes
    @GET
    @Path("/author/{auth}/{number}")
    @Produces(MediaType.TEXT_PLAIN)
    public String selectByAuthor(@PathParam("auth") String author, @PathParam("number") int number_quotes)throws java.io.FileNotFoundException,
            java.io.IOException, org.json.simple.parser.ParseException{

        author = author.replaceAll("\\_", " ");

//        make quote not to repeat (because cannot be hte same quote)
        String strCheck = "";

        JSONObject writer = new JSONObject(); //For output file
        ArrayList<String> ar = new ArrayList<String>(); //Temporary for collecting all authors

        for (Object o : a)
        {
            JSONObject quote = (JSONObject) o;

            String qt = (String) quote.get("Quote");
            String au = (String) quote.get("Author");
            String cat = (String) quote.get("Category");
            JSONArray tags = (JSONArray) quote.get("Tags");
            double pop = ((Number)quote.get("Popularity")).doubleValue();

            writer.put("Quote", qt);
            writer.put("Author", au);
            writer.put("Category", cat);
            writer.put("Popularity", pop);
            writer.put("Tags", tags);

//            iterating thought tags
            for (Object tg : tags)
            {
//                reducing the author string, to extract only author
                au = au.split(",")[0];
                author = author.toLowerCase();
                au = au.toLowerCase();

//                also checking if strcheck == qt so that no multiple quotes are added to array
                if(author.equals(au) && !strCheck.equals(qt)){

                    ar.add(writer.toString() + ("\n"));

//                  changing the quote str to not repeatedly write it again in the file next time
                    strCheck = qt;
                    break;
                }
            }

        }

//        Shuffling array to make output dynamic
        Collections.shuffle(ar);
        ArrayList<String> outArray = new ArrayList<String>(); //For output string
        for (int i=0; i<Math.min(number_quotes, ar.size()); i++) {
            outArray.add(ar.get(i));
        }

        return outArray.toString();
    }
}